alias analyzemft='docker run --rm -it -v $(pwd):/app/target analyzemft' #https://github.com/dkovar/analyzeMFT
alias flask-unsign='docker run --rm -it -v /usr/share:/usr/share -v $(pwd):/app/target flask-unsign' #https://github.com/Paradoxis/Flask-Unsign
alias firebaseexploiter='docker run --rm -it -v $(pwd):/app/target firebaseexploiter' #https://github.com/securebinary/firebaseExploiter?tab=readme-ov-file#installation
alias ftpup='docker run --rm -it -v $(pwd):/home/user -p 20-21:20-21 -p 40000-40009 -e FTP_USER=anonymous ftpserver'
alias grpcurl='docker run --rm -it -v $(pwd):/app/target grpcurl' #https://github.com/fullstorydev/grpcurl
alias httpx='docker run --rm -it -v $(pwd):/app/target httpx' #https://github.com/projectdiscovery/httpx
alias impacket='docker run --rm -it -v $(pwd):/currentdir impacket -c'
alias krbrute='docker run --rm -it -v /usr/share/wordlists:/usr/share/wordlists kr brute -x 20 -j 50'
alias krscan='docker run --rm -it -v /usr/share/wordlists:/usr/share/wordlists kr scan -x 20 -j 50'
alias linkfinder='docker run --rm -it -v $(pwd):/app/target linkfinder' #https://github.com/GerbenJavado/LinkFinder
alias ligolo-docker='docker run --rm -it -v $(pwd):/app/target --net=host ligolo-ng' #https://github.com/nicocha30/ligolo-ng
alias mft='docker run --rm -it -v $(pwd):/app/target mft' #https://github.com/omerbenamram/mft
alias mftdump='docker run --rm -it -v $(pwd):/app/target mftdump' #https://github.com/mcs6502/mftdump
alias naabu='docker run --rm -it -v $(pwd):/app/target naabu' #https://github.com/projectdiscovery/naabu/tree/main
alias nginxpwner='docker run --rm -it -v $(pwd):/tmp nginxpwner python3 nginxpwner.py'
alias nosql-loginbypass='docker run --rm -it nosql-attack-suite nosql-login-bypass.py' #https://github.com/C4l1b4n/NoSQL-Attack-Suite
alias nosql-loginenum='docker run --rm -it nosql-attack-suite nosql-login-enum.py' #https://github.com/C4l1b4n/NoSQL-Attack-Suite
alias nuclei='docker run --rm -it -v $(pwd):/app/target nuclei' #https://github.com/projectdiscovery/nuclei
alias oxml_xxe='echo "EXPOSING PORT 4567" && docker run --rm -it -p 4567:4567 oxml_xxe' 
alias pwncat='docker run --rm -it -v $(pwd):/app/target pwncat' #https://github.com/calebstewart/pwncat
alias pwncat-lvnp='docker run --rm -it -v $(pwd):/app/target -p 9080:9080 pwncat -l -p 9080' #https://github.com/calebstewart/pwncat
alias pyc-convert='docker run --rm -it -v $(pwd):/app/target python-xasm pyc-convert' #https://github.com/rocky/python-xasm
alias pyc-xasm='docker run --rm -it -v $(pwd):/app/target python-xasm pyc-xasm' #https://github.com/rocky/python-xasm
alias pydisasm='docker run --rm -it -v $(pwd):/app/target python-xasm pydisasm' #https://github.com/rocky/python-xasm
alias ropper='docker run --rm -it -v $(pwd):/app/target ropper' #https://github.com/sashs/Ropper
alias rustscan='docker run -it --rm -v $(pwd):/app/target rustscan' #https://github.com/RustScan/RustScan
alias secretfinder='docker run --rm -it -v $(pwd):/app/target secretfinder' #https://github.com/m4ll0k/SecretFinder
alias slurp='docker run --rm -it -v $(pwd):/app/target slurp slurp' #https://github.com/0xbharath/slurp
alias sherlock='docker run --rm -it -v $(pwd):/app/target sherlock' #https://github.com/sherlock-project/sherlock
alias socialhunter='docker run --rm -it -v $(pwd):/app/target socialhunter' #https://github.com/utkusen/socialhunter
alias subfinder='docker run --rm -it -v $(pwd):/app/target subfinder' #https://github.com/projectdiscovery/subfinder
alias sublist3r='docker run --rm -it -v $(pwd):/app/target sublist3r' #https://github.com/aboul3la/Sublist3r
alias tinja='docker run --rm -it -v $(pwd):/app/target tinja' #https://github.com/Hackmanit/TInjA
alias tplmap='docker run --rm -it -v $(pwd):/app/target tplmap' #https://github.com/epinna/tplmap
alias trufflehog='docker run --rm -it -v $(pwd):/app/target trufflehog' #https://github.co/trufflesecurity/trufflehog
alias uncompyle='docker run --rm -it -v $(pwd):/app/target uncompyle6' #https://github.com/rocky/python-uncompyle6/
alias webdavup='docker run --rm -it -p $2:$2 wsgidav --host=$1 --port=$2 --root=/tmp --auth=anonymous'
alias xnlinkfinder='docker run --rm -it -v $(pwd):/app/target xnlinkfinder' #https://github.com/xnl-h4ck3r/xnLinkFinder
alias xsstrike='docker run --rm -it -v $(pwd):/app/target xsstrike' #https://github.com/s0md3v/XSStrike
alias xxetester='docker run --rm -it -v $(pwd):/app/target xxetester'
alias jwt-tool='docker run --rm -it --network "host" -v ${HOME}/.jwt_tool:/root/.jwt_tool -v $(pwd):/tmp jwt-tool'
alias revhttp='docker compose --project-directory ~/.local/build/programs/localhttp up --build'
alias nyxelf='docker run -it -v $(pwd):/app/target --device /dev/kvm:/dev/kvm nyxelf'
alias bloodhound='docker compose --project-directory ~/.local/build/programs/bloodhound'
alias foundry='docker run -it -v $(pwd):/app/target ghcr.io/foundry-rs/foundry:latest' #https://github.com/foundry-rs/foundry

upgradecontainers() { #Iterates through ~/.local/build and pulls and builds all containers
    PREV_DIR=$OLDPWD
    cd ~/.local/build/programs;
    git pull;
    git submodule update --remote;
    for build in ~/.local/build/programs/*; do
        if [[ -d $build ]]; then
            cd $build
            docker build -t $(basename $build | tr "[:upper:]" "[:lower:]") . & #Docker will only build lowercase images
        fi
    done
    cd $PREV_DIR
}

tulip() {
    # Script to check if $(pwd)/tulip exists, if it does not then create the directory, 
    # copy the configurations.py and .env files from the tulip container, and inform the user to edit the files. 
    # If this does exist, then run the tulip container with the configurations.py and .env files mounted.
    if [ ! -f "tulip/.env" ]; then
        # If arg1 is not set, then inform the user and exit
        if [ -z "$1" ]; then
            echo "Usage: tulip <VM_IP>";
            return;
        fi
        mkdir -p tulip;
        cp -n ~/.local/build/programs/tulip/tulip/services/api/configurations.py ./tulip/configurations.py;
        echo "CONFIG=$(pwd)/tulip/configurations.py" >> tulip/.env;
        echo "TRAFFIC_DIR_HOST=$(pwd)/tulip/traffic" >> tulip/.env;
        echo "VM_IP=$1" >> tulip/.env;
        cp -n ~/.local/build/programs/tulip/.env ./tulip/.env;
        # Generate a non-interactive generic id_ed25519 keypair for the tulip container
        ssh-keygen -t ed25519 -f $(pwd)/tulip/id_ed25519 -N "" || echo "ssh generator failed for some reason, probably ssh already exists";
        echo "PRIVATE_KEY="$(cat tulip/id_ed25519 | base64 -w 0) >> tulip/.env;
        echo "Base files have been created. Please edit the configurations.py and .env files in the tulip directory before running the container.";
        echo "Copy the following o the authorized_keys file on the target machine to enable ssh tcpdump.";
        cat tulip/id_ed25519.pub | awk '{print $1" "$2}';
    else
        docker compose --project-directory ~/.local/build/programs/tulip --env-file ./tulip/.env up --quiet-pull --build;
    fi
}